

name: 'Terraform'

on:
  pull_request:
    branches: [ main ]


permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#     - name: Check az cli
#       run: az version
        
#     - name: az Login
#       env:
#         ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#         ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#         ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
     
#       run: |
#         az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
#         az account list
        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:

        RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }
      run: 
        export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
        export ARM_CLIENT_ID=$ARM_CLIENT_ID
        export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
        export ARM_TENANT_ID=$ARM_TENANT_ID
        export ARM_LOCATION=canadacentral
        terraform plan -var-file=dev.tfvars

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
